<?php

namespace Alura\Leilao\Tests\Service;

use Alura\Leilao\Model\Lance;
use Alura\Leilao\Model\Leilao;
use Alura\Leilao\Model\Usuario;
use Alura\Leilao\Service\Avaliador;
use PHPUnit\Framework\TestCase;


class AvaliadorTest extends TestCase
{
    private $leiloeiro;

    public static function setUpBeforeClass(): void
    {
        echo "Executando os testes" . PHP_EOL;
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->leiloeiro = new Avaliador();
    }

    public static function tearDownAfterClass(): void
    {
        echo "Testes finalizados" . PHP_EOL;
        parent::tearDownAfterClass(); // TODO: Change the autogenerated stub
    }

    /**
     * @dataProvider leilaoEmOrdemCrescente
     * @dataProvider leilaoEmOrdemDecrescente
     * @dataProvider leilaoEmOrdemAleatoria
     */
    public function testEqualsMaiorValor(Leilao $leilao)
    {
        $this->leiloeiro->avalia($leilao);

        $maiorvalor = $this->leiloeiro->getMaiorValor();

        $this->assertEquals(1000, $maiorvalor);
    }

    /**
     * @dataProvider leilaoEmOrdemCrescente
     * @dataProvider leilaoEmOrdemDecrescente
     * @dataProvider leilaoEmOrdemAleatoria
     */
    public function testEqualsMenorValor(Leilao $leilao)
    {
        $this->leiloeiro->avalia($leilao);

        $menorvalor = $this->leiloeiro->getMenorValor();

        $this->assertEquals(100, $menorvalor);
    }

    /**
     * @dataProvider leilaoEmOrdemCrescente
     * @dataProvider leilaoEmOrdemDecrescente
     * @dataProvider leilaoEmOrdemAleatoria
     */
    public function testGet3MaioresLances(Leilao $leilao)
    {
        $this->leiloeiro->avalia($leilao);

        $maioresLances = $this->leiloeiro->getMaioresLances();

        $this->assertCount(3, $maioresLances);
        $this->assertEquals(1000, $maioresLances[0]->getValor());
        $this->assertEquals(150, $maioresLances[1]->getValor());
        $this->assertEquals(120, $maioresLances[2]->getValor());
    }

    public function leilaoEmOrdemCrescente()
    {
        $leilao = new Leilao('Caralho aquático');

        $usuario = new Usuario('MOISES');
        $usuario2 = new Usuario('Joacas');
        $usuario3 = new Usuario('Diogo');
        $usuario4 = new Usuario('Maracas');

        $leilao->recebeLance(new Lance($usuario, 120));
        $leilao->recebeLance(new Lance($usuario2, 150));
        $leilao->recebeLance(new Lance($usuario3, 100));
        $leilao->recebeLance(new Lance($usuario4, 1000));

        return [
            [$leilao]
        ];
    }

    public function leilaoEmOrdemDecrescente()
    {
        $leilao = new Leilao('Caralho aquático');

        $usuario = new Usuario('MOISES');
        $usuario2 = new Usuario('Joacas');
        $usuario3 = new Usuario('Diogo');
        $usuario4 = new Usuario('Maracas');

        $leilao->recebeLance(new Lance($usuario4, 1000));
        $leilao->recebeLance(new Lance($usuario2, 150));
        $leilao->recebeLance(new Lance($usuario, 120));
        $leilao->recebeLance(new Lance($usuario3, 100));

        return [
            [$leilao]
        ];
    }

    public function leilaoEmOrdemAleatoria()
    {
        $leilao = new Leilao('Caralho aquático');

        $usuario = new Usuario('MOISES');
        $usuario2 = new Usuario('Joacas');
        $usuario3 = new Usuario('Diogo');
        $usuario4 = new Usuario('Maracas');

        $leilao->recebeLance(new Lance($usuario4, 1000));
        $leilao->recebeLance(new Lance($usuario, 120));
        $leilao->recebeLance(new Lance($usuario3, 100));
        $leilao->recebeLance(new Lance($usuario2, 150));

        return [
            [$leilao]
        ];
    }


}